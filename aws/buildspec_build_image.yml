version: 0.2

env:
  parameter-store:
    NPM_TOKEN: "/devops/build/npmToken"
    DOCKERHUB_USERNAME: "/devops/build/dockerhubUsername"
    DOCKERHUB_PASSWORD: "/devops/build/dockerhubPassword"

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - echo Uninstalling AWS CLI V1
      - rm -rf /usr/local/aws
      - rm -rf /root/.pyenv/shims/aws
      - echo Installing AWS CLI V2
      - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      - unzip -qq awscliv2.zip
      - ./aws/install
      - aws --version
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 730502903637.dkr.ecr.us-east-1.amazonaws.com
      - docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
      - REPOSITORY_URI=730502903637.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${Service}
      - COMMIT_SHA=$(git rev-parse HEAD || echo $Commit)
      - IMAGE_EXISTS=$(aws ecr describe-images --repository-name=${Service} --image-ids=imageTag=$COMMIT_SHA 2> /dev/null | jq '.imageDetails[0].imageTags[0]' -r)
      - echo Service ${Service}
      - echo Commit ${COMMIT_SHA}
      - echo Desired tag ${ImageTag}
      - "if [ ! -z $IMAGE_EXISTS ]; then echo Image already exists; fi"

  build:
    commands:
      - echo Build the application.
      - |
          if [ -z $IMAGE_EXISTS ]; then
            DOCKER_BUILDKIT=1 COMPOSE_DOCKER_CLI_BUILD=1 BUILDKIT_INLINE_CACHE=1 docker-compose build
            docker tag happymoney/${Service} $REPOSITORY_URI:$COMMIT_SHA
          fi

  post_build:
    commands:
      - |
          if [ -z $IMAGE_EXISTS ]; then
            echo Build completed on `date`
            echo Pushing the Docker images...
            docker push $REPOSITORY_URI:$COMMIT_SHA
          fi
      - 'payload="{\"ECR_Repo\": \""${Service}"\", \"Environment\": \""${Environment}"\", \"Commit\": \""${COMMIT_SHA}"\"}"'
      - echo $payload
      - aws lambda invoke --function-name promoteImage --payload "$payload" --invocation-type Event --cli-binary-format raw-in-base64-out promoteImage.out
